<?php
//Задачи для решения
//Работа с %
//Даны переменные $a=10 и $b=3. Найдите остаток от деления $a на $b.
$a = 10;
$b = 3;
echo $a % $b;


//Даны переменные $a и $b. Проверьте, что $a делится без остатка на $b. Если это так - выведите 'Делится' и результат деления,
//иначе выведите 'Делится с остатком' и остаток от деления.
echo "<br/><br/>";
function remainder($a, $b) {
    $result = $a % $b;
    if ($result == 0) {
        return "Делится $result <br/>";
    }else return "Делится с остатком $result <br/>";
}

echo remainder(10, 2);
echo "Для проверки: " . remainder(10, 3);


//Работа со степенью и корнем. Для решения задач данного блока вам понадобятся следующие функции: sqrt, pow.
//Возведите 2 в 10 степень. Результат запишите в переменную $st.
echo "<br/>";
$st = pow(2, 10);
echo $st;


//Найдите квадратный корень из 245.
echo "<br/><br/>";
echo sqrt(245);


//Дан массив с элементами 4, 2, 5, 19, 13, 0, 10. Найдите корень из суммы квадратов его элементов. Для решения воспользуйтесь циклом foreach.
echo "<br/><br/>";
$sum = 0;
$arr = [4, 2, 5, 19, 13, 0, 10];
foreach ($arr as $elem) {
    $elem *= $elem;
    $sum += $elem;
}
echo sqrt($sum);


//Работа с функциями округления. Для решения задач данного блока вам понадобятся следующие функции: round, ceil, floor.
//Найдите квадратный корень из 379. Результат округлите до целых, до десятых, до сотых.
echo "<br/><br/>";
echo "Округление квадратного корня из 379 до целых: " . round(sqrt(379)) . "<br/>";
echo "Округление квадратного корня из 379 до десятых: " . round(sqrt(379), 1) . "<br/>";
echo "Округление квадратного корня из 379 до сотых: " . round(sqrt(379), 2) . "<br/>";

//Найдите квадратный корень из 587. Округлите результат в большую и меньшую сторону, запишите результаты округления
//в ассоциативный массив с ключами 'floor' и 'ceil'.
echo "<br/>";
$arr = [
    'floor' => [],
    'ceil' => []
];
$arr['floor'] = floor(sqrt(587));
$arr['ceil'] = ceil(sqrt(587));


//Работа с min и max. Для решения задач данного блока вам понадобятся следующие функции: min, max.
//Даны числа 4, -2, 5, 19, -130, 0, 10. Найдите минимальное и максимальное число.
echo "<br/><br/>";
echo "Минимальное число: " . min(4, -2, 5, 19, -130, 0, 10) . "<br/>";
echo "Максимальное число: " . max(4, -2, 5, 19, -130, 0, 10);


//Работа с рандомом. Для решения задач данного блока вам понадобятся следующие функции: mt_rand.
//Выведите на экран случайное число от 1 до 100.
echo "<br/><br/>";
echo mt_rand(1, 100);


//Заполните массив 10-ю случайными числами. Подсказка: нужно воспользоваться циклами for или while.
echo "<br/><br/>";
$arr = [];
while ($i <= 10) {
    $arr[] = mt_rand(1, 100);
    $i++;
}


//Работа с модулем. Для решения задач данного блока вам понадобятся следующие функции: abs.
//Даны переменные $a и $b. Найдите найдите модуль разности $a и $b. Проверьте работу скрипта самостоятельно для различных $a и $b.
echo "<br/><br/>";
function modul($a, $b) {
    return abs($a) - abs($b);
}

echo modul(-4, 2). "<br/>";
echo modul(3, 6);


//Дан массив в числами, к примеру [1, 2, -1, -2, 3, -3]. Создайте из него новый массив так, чтобы отрицательные числа стали положительными,
//то есть у нас должен получиться такой массив: [1, 2, 1, 2, 3, 3].
echo "<br/><br/>";
$arr = [1, 2, -1, -2, 3, -3];
$arrr = [];
foreach ($arr as $elem) {
    $arrr[] = abs($elem);
}


//Задачи
//Дано число, например 30. У этого числа есть делители - числа, на которое оно делится без остатка.
//Делители числа 30 - это 1, 2, 3, 5, 6, 10, 15, 30. Задача: сделайте массив делителей нашего числа. Число может быть любым, не обязательно, 30.
echo "<br/><br/>";
$num = 30;
$array = [];
$arr = range(1, $num);
foreach ($arr as $elem) {
    if ($num % $elem == 0) {
        $array[] = $elem;
    }
}


//Дан массив [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]. Узнайте, сколько первых элементов массива нужно сложить, чтобы сумма получилась больше 10.
echo "<br/><br/>";
$sum = 0;
$i = 0;
$arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
foreach ($arr as $elem) {
    $sum += $elem;
    $i++;
    if ($sum > 10) break;
}
echo $i;